# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_msgs/RobotMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotMsg(genpy.Message):
  _md5sum = "3b2630c1c3ccdfb3994552115f3f96c9"
  _type = "robot_msgs/RobotMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# feedback information of the controlled robot

# state of robot: 
#   0 – STOPPED, not in execution, but ready to move.
#	1 – PAUSED, paused in the middle of unfinished motion
#	2 – EmeStop, not ready for any motion commands.
#	3 – RUNNING, executing motion command. 
#	4 – Error, not ready for any motion commands.
int16 state

# mode of robot:
#	0 for TEACH mode
#	1 for PLAY mode
#	2 for REMOTE mode
int16 mode

# motor_sync: get motor synchronization, 1 for motor sync, 0 for motor async
int16 motor_sync

# servo_enable: get servo status, 1 for servo control enabled, 0 for servo disabled
int16 servo_enable


int16 collision_state
"""
  __slots__ = ['state','mode','motor_sync','servo_enable','collision_state']
  _slot_types = ['int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,mode,motor_sync,servo_enable,collision_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.mode is None:
        self.mode = 0
      if self.motor_sync is None:
        self.motor_sync = 0
      if self.servo_enable is None:
        self.servo_enable = 0
      if self.collision_state is None:
        self.collision_state = 0
    else:
      self.state = 0
      self.mode = 0
      self.motor_sync = 0
      self.servo_enable = 0
      self.collision_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5h().pack(_x.state, _x.mode, _x.motor_sync, _x.servo_enable, _x.collision_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.state, _x.mode, _x.motor_sync, _x.servo_enable, _x.collision_state,) = _get_struct_5h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5h().pack(_x.state, _x.mode, _x.motor_sync, _x.servo_enable, _x.collision_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.state, _x.mode, _x.motor_sync, _x.servo_enable, _x.collision_state,) = _get_struct_5h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5h = None
def _get_struct_5h():
    global _struct_5h
    if _struct_5h is None:
        _struct_5h = struct.Struct("<5h")
    return _struct_5h
