// Generated by gencpp from file robot_msgs/RobotMsg.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_ROBOTMSG_H
#define ROBOT_MSGS_MESSAGE_ROBOTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct RobotMsg_
{
  typedef RobotMsg_<ContainerAllocator> Type;

  RobotMsg_()
    : state(0)
    , mode(0)
    , motor_sync(0)
    , servo_enable(0)
    , collision_state(0)  {
    }
  RobotMsg_(const ContainerAllocator& _alloc)
    : state(0)
    , mode(0)
    , motor_sync(0)
    , servo_enable(0)
    , collision_state(0)  {
  (void)_alloc;
    }



   typedef int16_t _state_type;
  _state_type state;

   typedef int16_t _mode_type;
  _mode_type mode;

   typedef int16_t _motor_sync_type;
  _motor_sync_type motor_sync;

   typedef int16_t _servo_enable_type;
  _servo_enable_type servo_enable;

   typedef int16_t _collision_state_type;
  _collision_state_type collision_state;





  typedef boost::shared_ptr< ::robot_msgs::RobotMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::RobotMsg_<ContainerAllocator> const> ConstPtr;

}; // struct RobotMsg_

typedef ::robot_msgs::RobotMsg_<std::allocator<void> > RobotMsg;

typedef boost::shared_ptr< ::robot_msgs::RobotMsg > RobotMsgPtr;
typedef boost::shared_ptr< ::robot_msgs::RobotMsg const> RobotMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::RobotMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::RobotMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::RobotMsg_<ContainerAllocator1> & lhs, const ::robot_msgs::RobotMsg_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.mode == rhs.mode &&
    lhs.motor_sync == rhs.motor_sync &&
    lhs.servo_enable == rhs.servo_enable &&
    lhs.collision_state == rhs.collision_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::RobotMsg_<ContainerAllocator1> & lhs, const ::robot_msgs::RobotMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::RobotMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::RobotMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::RobotMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::RobotMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::RobotMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::RobotMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::RobotMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b2630c1c3ccdfb3994552115f3f96c9";
  }

  static const char* value(const ::robot_msgs::RobotMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b2630c1c3ccdfb3ULL;
  static const uint64_t static_value2 = 0x994552115f3f96c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::RobotMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/RobotMsg";
  }

  static const char* value(const ::robot_msgs::RobotMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::RobotMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# feedback information of the controlled robot\n"
"\n"
"# state of robot: \n"
"#   0 – STOPPED, not in execution, but ready to move.\n"
"#	1 – PAUSED, paused in the middle of unfinished motion\n"
"#	2 – EmeStop, not ready for any motion commands.\n"
"#	3 – RUNNING, executing motion command. \n"
"#	4 – Error, not ready for any motion commands.\n"
"int16 state\n"
"\n"
"# mode of robot:\n"
"#	0 for TEACH mode\n"
"#	1 for PLAY mode\n"
"#	2 for REMOTE mode\n"
"int16 mode\n"
"\n"
"# motor_sync: get motor synchronization, 1 for motor sync, 0 for motor async\n"
"int16 motor_sync\n"
"\n"
"# servo_enable: get servo status, 1 for servo control enabled, 0 for servo disabled\n"
"int16 servo_enable\n"
"\n"
"\n"
"int16 collision_state\n"
;
  }

  static const char* value(const ::robot_msgs::RobotMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::RobotMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.mode);
      stream.next(m.motor_sync);
      stream.next(m.servo_enable);
      stream.next(m.collision_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::RobotMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::RobotMsg_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.state);
    s << indent << "mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mode);
    s << indent << "motor_sync: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor_sync);
    s << indent << "servo_enable: ";
    Printer<int16_t>::stream(s, indent + "  ", v.servo_enable);
    s << indent << "collision_state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.collision_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_ROBOTMSG_H
