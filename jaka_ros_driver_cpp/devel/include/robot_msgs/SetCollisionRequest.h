// Generated by gencpp from file robot_msgs/SetCollisionRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_SETCOLLISIONREQUEST_H
#define ROBOT_MSGS_MESSAGE_SETCOLLISIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct SetCollisionRequest_
{
  typedef SetCollisionRequest_<ContainerAllocator> Type;

  SetCollisionRequest_()
    : is_enable(false)
    , value(0)  {
    }
  SetCollisionRequest_(const ContainerAllocator& _alloc)
    : is_enable(false)
    , value(0)  {
  (void)_alloc;
    }



   typedef uint8_t _is_enable_type;
  _is_enable_type is_enable;

   typedef int16_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetCollisionRequest_

typedef ::robot_msgs::SetCollisionRequest_<std::allocator<void> > SetCollisionRequest;

typedef boost::shared_ptr< ::robot_msgs::SetCollisionRequest > SetCollisionRequestPtr;
typedef boost::shared_ptr< ::robot_msgs::SetCollisionRequest const> SetCollisionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::SetCollisionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::SetCollisionRequest_<ContainerAllocator1> & lhs, const ::robot_msgs::SetCollisionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.is_enable == rhs.is_enable &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::SetCollisionRequest_<ContainerAllocator1> & lhs, const ::robot_msgs::SetCollisionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d7163ed1d322a8ff456dd6e8d9fa8bd";
  }

  static const char* value(const ::robot_msgs::SetCollisionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d7163ed1d322a8fULL;
  static const uint64_t static_value2 = 0xf456dd6e8d9fa8bdULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/SetCollisionRequest";
  }

  static const char* value(const ::robot_msgs::SetCollisionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_enable\n"
"\n"
"int16 value\n"
"\n"
;
  }

  static const char* value(const ::robot_msgs::SetCollisionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_enable);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetCollisionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::SetCollisionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::SetCollisionRequest_<ContainerAllocator>& v)
  {
    s << indent << "is_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_enable);
    s << indent << "value: ";
    Printer<int16_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_SETCOLLISIONREQUEST_H
